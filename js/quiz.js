'use strict';

const questions = [
    {'question': "üá∑üá∫ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –†–æ—Å—Å–∏–∏.", 'answers': ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ú–æ—Å–∫–≤–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"], 'correct': "–ú–æ—Å–∫–≤–∞", 'score': 10 },
    {'question': "üáßüá∑ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –ë—Ä–∞–∑–∏–ª–∏–∏.", 'answers': ["–ë—Ä–∞–∑–∏–ª–∏–∞", "–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ", "–°–∞–Ω-–ü–∞—É–ª—É"], 'correct': "–ë—Ä–∞–∑–∏–ª–∏–∞", 'score': 10 },
    {'question': "üá∫üá∏ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –°–®–ê.", 'answers': ["–ù—å—é-–ô–æ—Ä–∫", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω"], 'correct': "–í–∞—à–∏–Ω–≥—Ç–æ–Ω", 'score': 10 },
    {'question': "üá´üá∑ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –§—Ä–∞–Ω—Ü–∏–∏", 'answers': ["–ü–∞—Ä–∏–∂", "–ù–µ–∞–ø–æ–ª—å", "–†–∏–º"], 'correct': "–ü–∞—Ä–∏–∂", 'score': 10 },
    {'question': "üá´üáÆ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –§–∏–Ω–ª—è–Ω–¥–∏–∏", 'answers': ["–û—Å–ª–æ", "–°—Ç–æ–∫–≥–æ–ª—å–º", "–•–µ–ª—å—Å–∏–Ω–∫–∏"], 'correct': "–•–µ–ª—å—Å–∏–Ω–∫–∏", 'score': 10 },
    {'question': "üáÆüáπ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –ò—Ç–∞–ª–∏–∏", 'answers': ["–õ–æ–Ω–¥–æ–Ω", "–†–∏–º", "–í–∞—Ä—à–∞–≤–∞"], 'correct': "–†–∏–º", 'score': 10 },
    {'question': "üá¨üáß –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏", 'answers': ["–õ–æ–Ω–¥–æ–Ω", "–°—Ç–æ–∫–≥–æ–ª—å–º", "–ù—å—é-–ô–æ—Ä–∫"], 'correct': "–õ–æ–Ω–¥–æ–Ω", 'score': 10 },
    {'question': "üá¶üáπ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –ê–≤—Å—Ç—Ä–∏–∏", 'answers': ["–ë–µ—Ä–ª–∏–Ω", "–û—Ç—Ç–∞–≤–∞", "–í–µ–Ω–∞"], 'correct': "–í–µ–Ω–∞", 'score': 10 },
    {'question': "üáØüáµ –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –Ø–ø–æ–Ω–∏–∏", 'answers': ["–¢–æ–∫–∏–æ", "–û—Å–∞–∫–∞", "–ö–∏–æ—Ç–æ"], 'correct': "–¢–æ–∫–∏–æ", 'score': 10 },
    {'question': "üáµüá± –ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –ü–æ–ª—å—à–∏", 'answers': ["–ú–∞–¥—Ä–∏–¥", "–í–∞—Ä—à–∞–≤–∞", "–ö–∏–µ–≤"], 'correct': "–í–∞—Ä—à–∞–≤–∞", 'score': 10 },
];

let result = 0;
let minimum = 80;
let maximum = 0;
let questionCounter = 0;

questions.forEach(question => {
    maximum += question.score;
});

let questionSlider = document.getElementById('carousel-inner');
let indicators = document.querySelector('.carousel-indicators');
const userScore = document.getElementById('user-score');
const maxScore = document.getElementById('max-score');
const finishButton = document.getElementById('finish-button');
const quizResult = document.getElementById('quiz-result');
const resultMessage = document.getElementById('result-message');
const passingScore = document.getElementById('passing-score');
const allDoneAlert = document.getElementById('all-done');

finishButton.style.display = 'none';

userScore.innerText = String(result);
maxScore.innerText = String(100);

for (let i = 0; i < questions.length; i++) {
    indicators.insertAdjacentHTML('beforeend', "" +
        "<button type=\"button\" data-bs-target=\"#quiz-carousel\" data-bs-slide-to=" + i + " aria-label=" + "Slide " + (i + 1) + "></button>")
}

indicators.firstElementChild.classList.add('active');

for (let i = 0; i < questions.length; i++) {
    questionSlider.insertAdjacentHTML('beforeend', "" +
        "<div class=\"carousel-item\">\n" +
        "                <div class=\"p-5\">\n" +
        "                    <form class='row mx-5' name=\"question-" + i + "\">\n" +
        "                        <div>\n" +
        "                            <p class='small'>–í–æ–ø—Ä–æ—Å " + (i + 1) + "</p>\n" +
        "                        </div>\n" +
        "                        <div>\n" +
        "                            <p class=\"lead\">" + questions[i].question + "</p>\n" +
        "                        </div>\n" +
        "                        <div class=\"answers\">\n" +
        "                        </div>\n" +
        "                        <div class=\"col-auto\">\n" +
        "                            <button type=\"submit\" class=\"btn submit btn-primary my-3\">–û—Ç–≤–µ—Ç–∏—Ç—å</button>\n" +
        "                        </div>\n" +
        "                    </form>\n" +
        "                </div>\n" +
        "            </div>");
}
questionSlider.firstElementChild.classList.add('active');

let submitButtons = document.querySelectorAll('.submit');
let answers = document.querySelectorAll('.answers');

for (let i = 0; i < questions.length; i++) {
    for (let j = 0; j < questions[i].answers.length; j++) {
        answers[i].insertAdjacentHTML('beforeend', "" +
            "<div class='form-check'>" +
            "<input class=\"form-check-input\" " +
            "type=\"radio\" " +
            "value=\"" + questions[i].answers[j] + "\"" +
            " name=\"question-" + i + "\" id=\"flexRadioDefault" + j + "\">\n" +
            "    <label class=\"form-check-label\" for=\"flexRadioDefault" + j + "\">\n" +
            questions[i].answers[j] +
            "    </label>\n" +
            "</div>");
    }
}

for (let i = 0; i < questions.length; i++) {
    submitButtons[i].addEventListener('click', e => {
        e.preventDefault();
        const userAnswer = document.querySelector(`input[name="question-${CSS.escape(String(i))}"]:checked`).value;
        if (userAnswer === questions[i].correct) {
            result += questions[i].score;
            userScore.innerText = String(result);
            alert(userAnswer + ' - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
        } else {
            alert(userAnswer + ' - —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - ' + questions[i].correct);
        }
        submitButtons[i].setAttribute('disabled', 'true');
        const inputs = document.querySelectorAll(`input[name="question-${CSS.escape(String(i))}"]`);
        inputs.forEach(input => {
            input.setAttribute('disabled', 'true');
        });
        questionCounter += 1;
        if (questionCounter >= questions.length) {
            allDoneAlert.classList.remove('visually-hidden');
            finishButton.style.display = 'block';
            quizResult.innerText = result;
            passingScore.innerText = String(minimum);
            if (result >= minimum) {
                resultMessage.innerText = '–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!';
            } else {
                resultMessage.innerText = '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ...';
            }
        }
    });
}